{"version":3,"sources":["helpers/loader.js","HOC/withLoadingScreen.js","component/Post/Post.js","context/dataContext.js","helpers/fetchDetails.js","component/DisplayPosts/index.js","component/DisplayPosts/DisplayPosts.js","container/HomePage/HomePage.js","component/PostDetails/PostDetails.js","component/PostDetails/index.js","container/PostPage/PostPage.js","helpers/NewSelect/NewSelect.jsx","Header/component/SearchUser/SearchUser.js","Header/Header.js","component/User/index.js","component/User/User.js","container/UserPage/UserPage.js","App.js","serviceWorker.js","index.js"],"names":["MyBulletListLoader","withLoadingScreen","WrappedComponent","Loader","LoadingScreen","props","isLoading","Post","userId","userName","id","title","data-testid","className","to","DataContext","createContext","loading","posts","users","isUpdated","setIsUpdated","DataContextProvider","useState","setPosts","setUsers","setLoading","useEffect","Promise","all","fetch","BASE_URL","then","response","json","postsDetails","map","post","user","find","name","finally","Provider","value","children","useContext","ListGroup","variant","i","Item","key","HomePage","context","Container","Comments","comments","comment","email","body","Row","Col","md","xs","PostPage","match","postId","Number","params","setPost","postDetails","NewSelect","labelKey","label","onChange","options","isMulti","multiple","placeholder","selected","SearchUser","setValue","setOptions","history","useHistory","Form","inline","onSubmit","e","preventDefault","push","InputGroup","Button","type","Header","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","username","website","company","catchPhrase","bs","height","speed","backgroundColor","foregroundColor","viewBox","x","y","rx","ry","width","UserPage","setUser","userDetails","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2fd5a0ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ContentLoader, { BulletList, Instagram } from \"react-content-loader\";\r\n\r\nexport const MyBulletListLoader = () => {\r\n  return (\r\n    <>\r\n      <BulletList />\r\n    </>\r\n  );\r\n};\r\nexport const MyLoader = () => (\r\n  <ContentLoader\r\n    height={140}\r\n    speed={1}\r\n    backgroundColor={\"#333\"}\r\n    foregroundColor={\"#999\"}\r\n    viewBox=\"0 0 380 70\"\r\n  >\r\n    {/* Only SVG shapes */}\r\n    <rect x=\"0\" y=\"0\" rx=\"5\" ry=\"5\" width=\"70\" height=\"70\" />\r\n    <rect x=\"80\" y=\"17\" rx=\"4\" ry=\"4\" width=\"300\" height=\"13\" />\r\n    <rect x=\"80\" y=\"40\" rx=\"3\" ry=\"3\" width=\"250\" height=\"10\" />\r\n  </ContentLoader>\r\n);\r\n \r\nexport const MyInstagramLoader = () => <Instagram />","import React from \"react\";\r\nimport { MyBulletListLoader } from \"./../helpers/loader\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst withLoadingScreen = (WrappedComponent, Loader = MyBulletListLoader) => {\r\n    const LoadingScreen = (props) => {\r\n      // render Content Loader\r\n    if (props.isLoading===true) return <Loader />;\r\n    return <WrappedComponent {...props} />;\r\n  };\r\n\r\n  LoadingScreen.propTypes = {\r\n    isLoading: PropTypes.bool,\r\n  };\r\n  return LoadingScreen;\r\n};\r\n\r\nexport default withLoadingScreen;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./Post.css\";\r\nconst Post = ({ userId, userName, id, title }) => {\r\n  return (\r\n    <div data-testid={\"post\"} className=\"tupple\" >\r\n      <div className=\"post-by\">\r\n        <h5>\r\n          <Link to={`/user/${userId}`}>\r\n            <span className=\"text-white\">{userName}</span>\r\n          </Link>\r\n        </h5>\r\n      </div>\r\n      <Link className=\"link\" to={`/post/${id}`}>\r\n        <div className=\"post-title\">\r\n          <p>\r\n            <span className=\"text-white\">{title}</span>\r\n          </p>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nPost.propTypes = {\r\n  userId: PropTypes.number,\r\n  id: PropTypes.number,\r\n  title: PropTypes.string,\r\n  userName: PropTypes.string\r\n};\r\nexport default Post;\r\n","import React, { createContext, useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { fetchPosts, fetchUsers } from \"./../helpers/fetchDetails\";\r\n\r\nexport const DataContext = createContext({\r\n  loading: false,\r\n  posts: [],\r\n  users: [],\r\n  isUpdated: false,\r\n  setIsUpdated: () => { },\r\n});\r\n\r\nconst DataContextProvider = (props) => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    Promise.all([fetchPosts(), fetchUsers()])\r\n      .then(([posts, users]) => {\r\n        const postsDetails = posts.map((post) => {\r\n          const user = users.find((user) => user.id === post.userId);\r\n          post.userName = user.name;\r\n          return post;\r\n        });\r\n        setPosts(postsDetails);\r\n        setUsers(users);\r\n      }).finally(() => setLoading(false))\r\n  }, []);\r\n\r\n  return (\r\n    <DataContext.Provider value={{ posts, users, isUpdated, setIsUpdated, loading }}>\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\nDataContextProvider.propTypes = {\r\n  children: PropTypes.object,\r\n};\r\n\r\nexport default DataContextProvider;\r\n","import { BASE_URL } from '../config.json';\r\n\r\nexport const fetchPosts = () => {\r\n  return fetch(`${BASE_URL}posts`)\r\n    .then((response) => response.json())\r\n    .then((json) => json);\r\n};\r\nexport const fetchUsers = () => {\r\n  return fetch(`${BASE_URL}users`)\r\n    .then((response) => response.json())\r\n    .then((json) => json);\r\n};\r\nexport const fetchPost = (id) => {\r\n  return fetch(`${BASE_URL}posts/${id}`)\r\n    .then((response) => response.json())\r\n    .then((json) => json);\r\n};\r\nexport const fetchComments = (id) => {\r\n  return fetch(`${BASE_URL}posts/${id}/comments`)\r\n    .then((response) => response.json())\r\n    .then((json) => json);\r\n};\r\nexport const fetchUser = (id) => {\r\n  return fetch(`${BASE_URL}users/${id}`)\r\n    .then((response) => response.json())\r\n    .then((json) => json);\r\n};\r\n","import withLoadingScreen from './../../HOC/withLoadingScreen';\r\n\r\nimport DisplayPosts from './DisplayPosts'\r\n\r\n\r\nexport default withLoadingScreen(DisplayPosts);","import React, { useContext } from \"react\";\r\nimport Post from \"../Post\";\r\nimport { DataContext } from \"./../../context/dataContext\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport './DisplayPosts.css';\r\n\r\nconst DisplayPosts = () => {\r\n  const context = useContext(DataContext);\r\n  const posts = context.posts;\r\n  return (\r\n    <ListGroup variant=\"flush\">\r\n      {posts.map((post, i) => {\r\n        return (\r\n          <ListGroup.Item key={post.title} variant={i % 2 ? \"dark\" : \"secondary\"} >\r\n            <Post {...post} />\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default DisplayPosts;\r\n","import React, { useContext } from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport DisplayPosts from \"../../component/DisplayPosts\";\r\nimport { DataContext } from \"../../context/dataContext\";\r\n\r\nconst HomePage = () => {\r\n  const context = useContext(DataContext);\r\n  return (\r\n    <>\r\n      <Container data-testid=\"homepage\" className=\"mt-4\">\r\n          <DisplayPosts isLoading={context.loading} />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport PropTypes from \"prop-types\";\r\nimport './PostDetails.css';\r\n\r\nconst Comments = ({ comments }) => {\r\n  const commentsList = (comments || []).map((comment) => {\r\n    return (\r\n      <div key={comment.name}>\r\n        <small className=\"card-text\">Email: {comment.email}</small>\r\n        <p className=\"card-text\">Comment: {comment.body}</p>\r\n        <hr />\r\n      </div>\r\n    );\r\n  });\r\n  return commentsList;\r\n};\r\n\r\nconst PostDetails = ({ title, body, comments, userName }) => {\r\n  return (\r\n    <div data-testid={'postdetails'} className=\"mt-4\">\r\n      <Row>\r\n          <h1 className=\"card-title\">{userName}</h1>\r\n      </Row>\r\n      <Row>\r\n        <Col md={8} xs={12} className=\"card mb-4 bg-dark text-white post\">\r\n          <h3 className=\"card-title\">{title}</h3>\r\n          <h5 className=\"card-text\">{body}</h5>\r\n        </Col>\r\n        <Col md={4} xs={12} className=\"mb-4  postData\">\r\n          <div className=\"comments\">\r\n            <Comments comments={comments} />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nPostDetails.propTypes = {\r\n  title: PropTypes.string,\r\n  userName: PropTypes.string,\r\n  body: PropTypes.string,\r\n  comments: PropTypes.array,\r\n};\r\nexport default PostDetails;\r\n","import PostDetails from \"./PostDetails\";\r\nimport withLoadingScreen from './../../HOC/withLoadingScreen';\r\nimport { MyInstagramLoader } from './../../helpers/loader';\r\n\r\nexport default withLoadingScreen(PostDetails, MyInstagramLoader)","import React, { useEffect, useState, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { fetchComments } from \"./../../helpers/fetchDetails\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport \"./PostPage.css\";\r\nimport PostDetails from \"../../component/PostDetails\";\r\nimport { DataContext } from \"./../../context/dataContext\";\r\n\r\nconst PostPage = ({ match }) => {\r\n  const postId = Number(match.params.postId);\r\n  const [post, setPost] = useState({});\r\n  const context = useContext(DataContext);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    fetchComments(postId)\r\n      .then((comments) => {\r\n        const postDetails = context.posts.find((post) => post.id === postId);\r\n        (postDetails || {}).comments = comments;\r\n        setPost(postDetails);\r\n      })\r\n      .finally(() => setLoading(false));\r\n  }, [context.posts, postId]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n          <PostDetails {...post} isLoading={context.loading || loading} />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nPostPage.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\nexport default PostPage;\r\n","import React from \"react\";\r\nimport { Typeahead } from \"react-bootstrap-typeahead\";\r\nimport { PropTypes } from \"prop-types\";\r\nconst NewSelect = ({\r\n  labelKey,\r\n  label,\r\n  value,\r\n  onChange,\r\n  options,\r\n  isMulti = false,\r\n}) => {\r\n  return (\r\n    <>\r\n      <Typeahead\r\n        id=\"basic-typeahead-example\"\r\n        labelKey={labelKey}\r\n        multiple={isMulti}\r\n        onChange={onChange}\r\n        options={options}\r\n        placeholder={label}\r\n        selected={value}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nNewSelect.propTypes = {\r\n  label: PropTypes.string,\r\n  value: PropTypes.array,\r\n  labelKey: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  options: PropTypes.array,\r\n  isMulti: PropTypes.bool,\r\n};\r\nexport default NewSelect;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport NewSelect from \"../../../helpers/NewSelect\";\r\nimport { DataContext } from \"./../../../context/dataContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst SearchUser = () => {\r\n  const [value, setValue] = useState([]);\r\n  const [options, setOptions] = useState([]);\r\n  const context = useContext(DataContext);\r\n\r\n  useEffect(() => {\r\n    const users = context.users;\r\n    const options = users.map((user) => ({ label: user.name, value: user.id }));\r\n    setOptions(options);\r\n  }, [context.users]);\r\n\r\n  const history = useHistory();\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    history.push(`/user/${value[0].value}`);\r\n    setValue([]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Form inline onSubmit={(e) => onSubmit(e)}>\r\n        <InputGroup>\r\n        <NewSelect\r\n          labelKey={\"label\"}\r\n          name={\"searchUser\"}\r\n          label={\"Search\"}\r\n          options={options}\r\n          value={value}\r\n          onChange={(selected) => setValue(selected)}\r\n          />\r\n        <Button type={\"submit\"} variant=\"dark\">\r\n          Search\r\n        </Button>\r\n          </InputGroup>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchUser;\r\n","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SearchUser from \"./component/SearchUser\";\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\">\r\n      <Navbar.Brand>\r\n        <Link className=\"title\" to=\"/\">\r\n          ToDo\r\n        </Link>\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav>\r\n            <Link className=\"menu\" to=\"/\">\r\n              Posts\r\n            </Link>\r\n          </Nav>\r\n        </Nav>\r\n        <SearchUser />\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import User from \"./User\";\r\nimport withLoadingScreen from '../../HOC/withLoadingScreen';\r\nimport { MyLoader } from \"../../helpers/loader\";\r\n\r\nexport default withLoadingScreen(User, MyLoader);","import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst User = ({ username, name, email, website, company }) => {\r\n  return (\r\n    <Row data-testid={\"user\"} className=\"mt-4\">\r\n      <Col md={6} xs={12} className=\"card mb-4 bg-dark text-white post\">\r\n        <p>User Name: {username}</p>\r\n        <p>Name: {name}</p>\r\n        <p>Email: {email}</p>\r\n        <p>Website: {website}</p>\r\n      </Col>\r\n      <Col md={6} xs={12} className=\"card mb-4 bg-white text-dark post\">\r\n        <p>Work: {(company || {}).name}</p>\r\n        <p>Slogan: {(company || {}).catchPhrase}</p>\r\n        <p>Base: {(company || {}).bs}</p>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nUser.propTypes = {\r\n  username: PropTypes.string,\r\n  name: PropTypes.string,\r\n  email: PropTypes.string,\r\n  website: PropTypes.string,\r\n  company: PropTypes.object\r\n};\r\nexport default User;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport User from \"../../component/User\";\r\nimport { DataContext } from './../../context/dataContext';\r\n\r\nconst UserPage = ({ match }) => {\r\n  const userId = Number(match.params.userId);\r\n  const [user, setUser] = useState({});\r\n\r\n  const context = useContext(DataContext);\r\n  useEffect(() => {\r\n      const userDetails = context.users.find((user) => user.id === userId);\r\n      setUser(userDetails);\r\n  }, [context.users, userId]);\r\n  \r\n  return (\r\n    <>\r\n      <Container>\r\n        <User {...user} isLoading={context.loading} />\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nUserPage.propTypes = {\r\n  match: PropTypes.object,\r\n};\r\nexport default UserPage;\r\n","import React from \"react\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\n\nimport HomePage from \"./container/HomePage\";\nimport PostPage from './container/PostPage';\nimport Header from './Header';\nimport UserPage from \"./container/UserPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Header />\n        <Route path=\"/\" exact component={HomePage} />\n        <Route path=\"/post/:postId\" component={PostPage} />\n        <Route path=\"/user/:userId\" component={UserPage} />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport DataContextProvider from \"./context/dataContext\";\n\nReactDOM.render(\n  <DataContextProvider>\n    <App />\n  </DataContextProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}